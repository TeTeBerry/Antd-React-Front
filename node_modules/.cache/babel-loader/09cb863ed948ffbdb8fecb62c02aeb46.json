{"ast":null,"code":"import _classCallCheck from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/berry/antd-demo/client/src/pages/common/Report.js\";\nimport React, { Component } from \"react\";\nimport { Chart, Geom, Axis, Tooltip, Legend } from \"bizcharts\";\nimport { Card } from \"antd\";\nimport DataSet from \"@antv/data-set\";\nimport axios from \"axios\";\n\nvar Report =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Report, _Component);\n\n  function Report() {\n    _classCallCheck(this, Report);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Report).apply(this, arguments));\n  }\n\n  _createClass(Report, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      axios.get(\"http://localhost:8080/iot/data/getDailyData?meterName=Sensor-1&date=2019-07-03\").then(function (res) {\n        console.log(res);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // const data = [\n      //   {\n      //     month: \"Jan\",\n      //     Monthly: 3.9\n      //   },\n      //   {\n      //     month: \"Feb\",\n      //     Monthly: 4.2\n      //   },\n      //   {\n      //     month: \"Mar\",\n      //     Monthly: 5.7\n      //   },\n      //   {\n      //     month: \"Apr\",\n      //     Monthly: 8.5\n      //   },\n      //   {\n      //     month: \"May\",\n      //     Monthly: 11.9\n      //   },\n      //   {\n      //     month: \"Jun\",\n      //     Monthly: 15.2\n      //   },\n      //   {\n      //     month: \"Jul\",\n      //     Monthly: 17.0\n      //   },\n      //   {\n      //     month: \"Aug\",\n      //     Monthly: 16.6\n      //   },\n      //   {\n      //     month: \"Sep\",\n      //     Monthly: 14.2\n      //   },\n      //   {\n      //     month: \"Oct\",\n      //     Monthly: 10.3\n      //   },\n      //   {\n      //     month: \"Nov\",\n      //     Monthly: 6.6\n      //   },\n      //   {\n      //     month: \"Dec\",\n      //     Monthly: 4.8\n      //   }\n      // ];\n      // const ds = new DataSet();\n      // const dv = ds.createView().source(data);\n      // dv.transform({\n      //   type: \"fold\",\n      //   fields: [\"Monthly\"],\n      //   // 展开字段集\n      //   key: \"date\",\n      //   // key字段\n      //   value: \"volume\" // value字段\n      // });\n      // console.log(dv);\n      // const cols = {\n      //   month: {\n      //     range: [0, 1]\n      //   }\n      // };\n      // const weekdata = [\n      //   {\n      //     week: \"Monday\",\n      //     Weekly: 3.2\n      //   },\n      //   {\n      //     week: \"Tuesdat\",\n      //     Weekly: 8\n      //   },\n      //   {\n      //     week: \"Wedesday\",\n      //     Weekly: 3.1\n      //   },\n      //   {\n      //     week: \"Thuesday\",\n      //     Weekly: 3.7\n      //   },\n      //   {\n      //     week: \"Friday\",\n      //     Weekly: 3.0\n      //   },\n      //   {\n      //     week: \"Satuday\",\n      //     Weekly: 2.7\n      //   },\n      //   {\n      //     week: \"Sunday\",\n      //     Weekly: 2.0\n      //   }\n      // ];\n      // const dsw = new DataSet();\n      // const dvw = dsw.createView().source(weekdata);\n      // dvw.transform({\n      //   type: \"fold\",\n      //   fields: [\"Weekly\"],\n      //   key: \"date\",\n      //   value: \"volume\"\n      // });\n      // console.log(dvw);\n      // const colsw = {\n      //   week: {\n      //     range: [0, 1]\n      //   }\n      // };\n      var daydata = [];\n      var dsd = new DataSet();\n      var dvd = dsd.createView().source(daydata);\n      dvd.transform({\n        type: \"fold\",\n        fields: [\"totalMilliters\"],\n        // 展开字段集\n        key: \"date\",\n        // key字段\n        value: \"volume\" // value字段\n\n      });\n      console.log(dvd);\n      var colsd = {\n        hour: {\n          range: [0, 1]\n        }\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(Card, {\n        title: \"Water report\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: {\n          fontSize: 14,\n          color: \"rgba(0, 0, 0, 0.85)\",\n          marginBottom: 16,\n          fontWeight: 500\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"Water graph\"), React.createElement(Card, {\n        type: \"inner\",\n        title: \"Monthly report\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }), React.createElement(Card, {\n        type: \"inner\",\n        title: \"Weekly report\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }), React.createElement(Card, {\n        type: \"inner\",\n        title: \"Daliy report\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, React.createElement(Chart, {\n        height: 400,\n        data: dvd,\n        scale: colsd,\n        forceFit: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, React.createElement(Legend, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }), React.createElement(Axis, {\n        name: \"hour\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }), React.createElement(Axis, {\n        name: \"volume\",\n        label: {\n          formatter: function formatter(val) {\n            return \"\".concat(val, \"L\");\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        crosshairs: {\n          type: \"y\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }), React.createElement(Geom, {\n        type: \"line\",\n        position: \"day*volume\",\n        size: 2,\n        color: \"date\",\n        shape: \"smooth\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }), React.createElement(Geom, {\n        type: \"point\",\n        position: \"day*volume\",\n        size: 4,\n        shape: \"circle\",\n        color: \"date\",\n        style: {\n          stroke: \"#fff\",\n          lineWidth: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return Report;\n}(Component);\n\nexport default Report;","map":{"version":3,"sources":["/Users/berry/antd-demo/client/src/pages/common/Report.js"],"names":["React","Component","Chart","Geom","Axis","Tooltip","Legend","Card","DataSet","axios","Report","get","then","res","console","log","daydata","dsd","dvd","createView","source","transform","type","fields","key","value","colsd","hour","range","fontSize","color","marginBottom","fontWeight","formatter","val","stroke","lineWidth"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,IAAtB,EAA4BC,OAA5B,EAAqCC,MAArC,QAAmD,WAAnD;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IACMC,M;;;;;;;;;;;;;wCACgB;AAClBD,MAAAA,KAAK,CACFE,GADH,CAEI,gFAFJ,EAIGC,IAJH,CAIQ,UAAAC,GAAG,EAAI;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,OANH;AAOD;;;6BAEQ;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,UAAMG,OAAO,GAAG,EAAhB;AACA,UAAMC,GAAG,GAAG,IAAIT,OAAJ,EAAZ;AACA,UAAMU,GAAG,GAAGD,GAAG,CAACE,UAAJ,GAAiBC,MAAjB,CAAwBJ,OAAxB,CAAZ;AACAE,MAAAA,GAAG,CAACG,SAAJ,CAAc;AACZC,QAAAA,IAAI,EAAE,MADM;AAEZC,QAAAA,MAAM,EAAE,CAAC,gBAAD,CAFI;AAGZ;AACAC,QAAAA,GAAG,EAAE,MAJO;AAKZ;AACAC,QAAAA,KAAK,EAAE,QANK,CAMI;;AANJ,OAAd;AAQAX,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACA,UAAMQ,KAAK,GAAG;AACZC,QAAAA,IAAI,EAAE;AACJC,UAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AADH;AADM,OAAd;AAMA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAC,cAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,QAAQ,EAAE,EADL;AAELC,UAAAA,KAAK,EAAE,qBAFF;AAGLC,UAAAA,YAAY,EAAE,EAHT;AAILC,UAAAA,UAAU,EAAE;AAJP,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAYE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,OAAX;AAAmB,QAAA,KAAK,EAAC,gBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAZF,EAgDE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,OAAX;AAAmB,QAAA,KAAK,EAAC,eAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhDF,EAsFE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,OAAX;AAAmB,QAAA,KAAK,EAAC,cAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,MAAM,EAAE,GAAf;AAAoB,QAAA,IAAI,EAAEd,GAA1B;AAA+B,QAAA,KAAK,EAAEQ,KAAtC;AAA6C,QAAA,QAAQ,MAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE,oBAAC,IAAD;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,KAAK,EAAE;AACLO,UAAAA,SAAS,EAAE,mBAAAC,GAAG;AAAA,6BAAOA,GAAP;AAAA;AADT,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,EAUE,oBAAC,OAAD;AACE,QAAA,UAAU,EAAE;AACVZ,UAAAA,IAAI,EAAE;AADI,SADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVF,EAgBE,oBAAC,IAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,QAAQ,EAAC,YAFX;AAGE,QAAA,IAAI,EAAE,CAHR;AAIE,QAAA,KAAK,EAAE,MAJT;AAKE,QAAA,KAAK,EAAE,QALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhBF,EAuBE,oBAAC,IAAD;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,QAAQ,EAAC,YAFX;AAGE,QAAA,IAAI,EAAE,CAHR;AAIE,QAAA,KAAK,EAAE,QAJT;AAKE,QAAA,KAAK,EAAE,MALT;AAME,QAAA,KAAK,EAAE;AACLa,UAAAA,MAAM,EAAE,MADH;AAELC,UAAAA,SAAS,EAAE;AAFN,SANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAvBF,CADF,CAtFF,CADF,CADF;AAgID;;;;EA9QkBnC,S;;AAiRrB,eAAeS,MAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Chart, Geom, Axis, Tooltip, Legend } from \"bizcharts\";\nimport { Card } from \"antd\";\nimport DataSet from \"@antv/data-set\";\nimport axios from \"axios\";\nclass Report extends Component {\n  componentDidMount() {\n    axios\n      .get(\n        \"http://localhost:8080/iot/data/getDailyData?meterName=Sensor-1&date=2019-07-03\"\n      )\n      .then(res => {\n        console.log(res);\n      });\n  }\n\n  render() {\n    // const data = [\n    //   {\n    //     month: \"Jan\",\n    //     Monthly: 3.9\n    //   },\n    //   {\n    //     month: \"Feb\",\n    //     Monthly: 4.2\n    //   },\n    //   {\n    //     month: \"Mar\",\n    //     Monthly: 5.7\n    //   },\n    //   {\n    //     month: \"Apr\",\n    //     Monthly: 8.5\n    //   },\n    //   {\n    //     month: \"May\",\n    //     Monthly: 11.9\n    //   },\n    //   {\n    //     month: \"Jun\",\n    //     Monthly: 15.2\n    //   },\n    //   {\n    //     month: \"Jul\",\n    //     Monthly: 17.0\n    //   },\n    //   {\n    //     month: \"Aug\",\n    //     Monthly: 16.6\n    //   },\n    //   {\n    //     month: \"Sep\",\n    //     Monthly: 14.2\n    //   },\n    //   {\n    //     month: \"Oct\",\n    //     Monthly: 10.3\n    //   },\n    //   {\n    //     month: \"Nov\",\n    //     Monthly: 6.6\n    //   },\n    //   {\n    //     month: \"Dec\",\n    //     Monthly: 4.8\n    //   }\n    // ];\n    // const ds = new DataSet();\n    // const dv = ds.createView().source(data);\n    // dv.transform({\n    //   type: \"fold\",\n    //   fields: [\"Monthly\"],\n    //   // 展开字段集\n    //   key: \"date\",\n    //   // key字段\n    //   value: \"volume\" // value字段\n    // });\n    // console.log(dv);\n    // const cols = {\n    //   month: {\n    //     range: [0, 1]\n    //   }\n    // };\n\n    // const weekdata = [\n    //   {\n    //     week: \"Monday\",\n    //     Weekly: 3.2\n    //   },\n    //   {\n    //     week: \"Tuesdat\",\n    //     Weekly: 8\n    //   },\n    //   {\n    //     week: \"Wedesday\",\n    //     Weekly: 3.1\n    //   },\n    //   {\n    //     week: \"Thuesday\",\n    //     Weekly: 3.7\n    //   },\n    //   {\n    //     week: \"Friday\",\n    //     Weekly: 3.0\n    //   },\n    //   {\n    //     week: \"Satuday\",\n    //     Weekly: 2.7\n    //   },\n    //   {\n    //     week: \"Sunday\",\n    //     Weekly: 2.0\n    //   }\n    // ];\n    // const dsw = new DataSet();\n    // const dvw = dsw.createView().source(weekdata);\n    // dvw.transform({\n    //   type: \"fold\",\n    //   fields: [\"Weekly\"],\n    //   key: \"date\",\n    //   value: \"volume\"\n    // });\n    // console.log(dvw);\n    // const colsw = {\n    //   week: {\n    //     range: [0, 1]\n    //   }\n    // };\n\n    const daydata = [];\n    const dsd = new DataSet();\n    const dvd = dsd.createView().source(daydata);\n    dvd.transform({\n      type: \"fold\",\n      fields: [\"totalMilliters\"],\n      // 展开字段集\n      key: \"date\",\n      // key字段\n      value: \"volume\" // value字段\n    });\n    console.log(dvd);\n    const colsd = {\n      hour: {\n        range: [0, 1]\n      }\n    };\n\n    return (\n      <div>\n        <Card title=\"Water report\">\n          <p\n            style={{\n              fontSize: 14,\n              color: \"rgba(0, 0, 0, 0.85)\",\n              marginBottom: 16,\n              fontWeight: 500\n            }}\n          >\n            Water graph\n          </p>\n\n          <Card type=\"inner\" title=\"Monthly report\">\n            {/* <Chart height={400} data={dv} scale={cols} forceFit>\n              <Legend />\n              <Axis name=\"month\" />\n              <Axis\n                name=\"volume\"\n                label={{\n                  formatter: val => `${val}L`\n                }}\n              />\n              <Tooltip\n                crosshairs={{\n                  type: \"y\"\n                }}\n              />\n              <Geom\n                type=\"line\"\n                position=\"month*volume\"\n                size={2}\n                color={\"date\"}\n                shape={\"smooth\"}\n              />\n              <Geom\n                type=\"point\"\n                position=\"month*volume\"\n                size={4}\n                shape={\"circle\"}\n                color={\"date\"}\n                style={{\n                  stroke: \"#fff\",\n                  lineWidth: 1\n                }}\n              />\n            </Chart> */}\n          </Card>\n\n          <Card type=\"inner\" title=\"Weekly report\">\n            {/* <Chart height={400} data={dvw} scale={colsw} forceFit>\n              <Legend />\n              <Axis name=\"week\" />\n              <Axis\n                name=\"volume\"\n                label={{\n                  formatter: val => `${val}L`\n                }}\n              />\n\n              <Tooltip\n                crosshairs={{\n                  type: \"y\"\n                }}\n              />\n\n              <Geom\n                type=\"line\"\n                position=\"week*volume\"\n                size={2}\n                color={\"date\"}\n                shape={\"smooth\"}\n              />\n              <Geom\n                type=\"point\"\n                position=\"week*volume\"\n                size={4}\n                shape={\"circle\"}\n                color={\"date\"}\n                style={{\n                  stroke: \"#fff\",\n                  lineWidth: 1\n                }}\n              />\n            </Chart> */}\n          </Card>\n\n          <Card type=\"inner\" title=\"Daliy report\">\n            <Chart height={400} data={dvd} scale={colsd} forceFit>\n              <Legend />\n              <Axis name=\"hour\" />\n              <Axis\n                name=\"volume\"\n                label={{\n                  formatter: val => `${val}L`\n                }}\n              />\n\n              <Tooltip\n                crosshairs={{\n                  type: \"y\"\n                }}\n              />\n\n              <Geom\n                type=\"line\"\n                position=\"day*volume\"\n                size={2}\n                color={\"date\"}\n                shape={\"smooth\"}\n              />\n              <Geom\n                type=\"point\"\n                position=\"day*volume\"\n                size={4}\n                shape={\"circle\"}\n                color={\"date\"}\n                style={{\n                  stroke: \"#fff\",\n                  lineWidth: 1\n                }}\n              />\n            </Chart>\n          </Card>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default Report;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/berry/antd-demo/client/src/pages/common/Report.js\";\nimport React, { Component } from \"react\";\nimport { Chart, Geom, Axis, Tooltip, Legend } from \"bizcharts\";\nimport { Card } from \"antd\";\nimport DataSet from \"@antv/data-set\";\nimport axios from \"axios\";\n\nvar Report =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Report, _Component);\n\n  function Report() {\n    _classCallCheck(this, Report);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Report).apply(this, arguments));\n  }\n\n  _createClass(Report, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      axios.get(\"http://localhost:8080/iot/data/getDailyData?meterName=Sensor-1&date=2019-07-03\").then(function (res) {\n        console.log(res);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var data = [{\n        month: \"Jan\",\n        Monthly: 3.9\n      }, {\n        month: \"Feb\",\n        Monthly: 4.2\n      }, {\n        month: \"Mar\",\n        Monthly: 5.7\n      }, {\n        month: \"Apr\",\n        Monthly: 8.5\n      }, {\n        month: \"May\",\n        Monthly: 11.9\n      }, {\n        month: \"Jun\",\n        Monthly: 15.2\n      }, {\n        month: \"Jul\",\n        Monthly: 17.0\n      }, {\n        month: \"Aug\",\n        Monthly: 16.6\n      }, {\n        month: \"Sep\",\n        Monthly: 14.2\n      }, {\n        month: \"Oct\",\n        Monthly: 10.3\n      }, {\n        month: \"Nov\",\n        Monthly: 6.6\n      }, {\n        month: \"Dec\",\n        Monthly: 4.8\n      }];\n      var ds = new DataSet();\n      var dv = ds.createView().source(data);\n      dv.transform({\n        type: \"fold\",\n        fields: [\"Monthly\"],\n        // 展开字段集\n        key: \"date\",\n        // key字段\n        value: \"volume\" // value字段\n\n      });\n      console.log(dv);\n      var cols = {\n        month: {\n          range: [0, 1]\n        }\n      };\n      var weekdata = [{\n        week: \"Monday\",\n        Weekly: 3.2\n      }, {\n        week: \"Tuesdat\",\n        Weekly: 8\n      }, {\n        week: \"Wedesday\",\n        Weekly: 3.1\n      }, {\n        week: \"Thuesday\",\n        Weekly: 3.7\n      }, {\n        week: \"Friday\",\n        Weekly: 3.0\n      }, {\n        week: \"Satuday\",\n        Weekly: 2.7\n      }, {\n        week: \"Sunday\",\n        Weekly: 2.0\n      }];\n      var dsw = new DataSet();\n      var dvw = dsw.createView().source(weekdata);\n      dvw.transform({\n        type: \"fold\",\n        fields: [\"Weekly\"],\n        key: \"date\",\n        value: \"volume\"\n      });\n      console.log(dvw);\n      var colsw = {\n        week: {\n          range: [0, 1]\n        }\n      };\n      var daydata = [{\n        day: \"00:00\",\n        Dayliy: \"10\"\n      }, {\n        day: \"01:00\",\n        Dayliy: \"4.2\"\n      }, {\n        day: \"02:00\",\n        Dayliy: \"6.2\"\n      }, {\n        day: \"03:00\",\n        Dayliy: \"4.9\"\n      }, {\n        day: \"04:00\",\n        Dayliy: \"12.1\"\n      }, {\n        day: \"05:00\",\n        Dayliy: \"3.2\"\n      }, {\n        day: \"06:00\",\n        Dayliy: \"2.7\"\n      }, {\n        day: \"07:00\",\n        Dayliy: \"4.6\"\n      }, {\n        day: \"08:00\",\n        Dayliy: \"6.3\"\n      }, {\n        day: \"09:00\",\n        Dayliy: \"5.3\"\n      }, {\n        day: \"10:00\",\n        Dayliy: \"8.0\"\n      }, {\n        day: \"11:00\",\n        Dayliy: \"6.9\"\n      }, {\n        day: \"12:00\",\n        Dayliy: \"6.2\"\n      }, {\n        day: \"13:00\",\n        Dayliy: \"10.1\"\n      }, {\n        day: \"14:00\",\n        Dayliy: \"7.2\"\n      }, {\n        day: \"15:00\",\n        Dayliy: \"6.2\"\n      }, {\n        day: \"16:00\",\n        Dayliy: \"22\"\n      }, {\n        day: \"17:00\",\n        Dayliy: \"9.2\"\n      }, {\n        day: \"18:00\",\n        Dayliy: \"8.2\"\n      }, {\n        day: \"19:00\",\n        Dayliy: \"8.2\"\n      }, {\n        day: \"20:00\",\n        Dayliy: \"5.2\"\n      }, {\n        day: \"21:00\",\n        Dayliy: \"2.2\"\n      }, {\n        day: \"22:00\",\n        Dayliy: \"6.2\"\n      }, {\n        day: \"23:00\",\n        Dayliy: \"4.2\"\n      }];\n      var dsd = new DataSet();\n      var dvd = dsd.createView().source(daydata);\n      dvd.transform({\n        type: \"fold\",\n        fields: [\"Dayliy\"],\n        // 展开字段集\n        key: \"date\",\n        // key字段\n        value: \"volume\" // value字段\n\n      });\n      console.log(dvd);\n      var colsd = {\n        day: {\n          range: [0, 1]\n        }\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, React.createElement(Card, {\n        title: \"Water report\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: {\n          fontSize: 14,\n          color: \"rgba(0, 0, 0, 0.85)\",\n          marginBottom: 16,\n          fontWeight: 500\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, \"Water graph\"), React.createElement(Card, {\n        type: \"inner\",\n        title: \"Monthly report\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(Chart, {\n        height: 400,\n        data: dv,\n        scale: cols,\n        forceFit: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(Legend, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }), React.createElement(Axis, {\n        name: \"month\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }), React.createElement(Axis, {\n        name: \"volume\",\n        label: {\n          formatter: function formatter(val) {\n            return \"\".concat(val, \"L\");\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        crosshairs: {\n          type: \"y\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }), React.createElement(Geom, {\n        type: \"line\",\n        position: \"month*volume\",\n        size: 2,\n        color: \"date\",\n        shape: \"smooth\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }), React.createElement(Geom, {\n        type: \"point\",\n        position: \"month*volume\",\n        size: 4,\n        shape: \"circle\",\n        color: \"date\",\n        style: {\n          stroke: \"#fff\",\n          lineWidth: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }))), React.createElement(Card, {\n        type: \"inner\",\n        title: \"Weekly report\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, React.createElement(Chart, {\n        height: 400,\n        data: dvw,\n        scale: colsw,\n        forceFit: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }, React.createElement(Legend, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }), React.createElement(Axis, {\n        name: \"week\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }), React.createElement(Axis, {\n        name: \"volume\",\n        label: {\n          formatter: function formatter(val) {\n            return \"\".concat(val, \"L\");\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        crosshairs: {\n          type: \"y\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }), React.createElement(Geom, {\n        type: \"line\",\n        position: \"week*volume\",\n        size: 2,\n        color: \"date\",\n        shape: \"smooth\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }), React.createElement(Geom, {\n        type: \"point\",\n        position: \"week*volume\",\n        size: 4,\n        shape: \"circle\",\n        color: \"date\",\n        style: {\n          stroke: \"#fff\",\n          lineWidth: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }))), React.createElement(Card, {\n        type: \"inner\",\n        title: \"Daliy report\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }, React.createElement(Chart, {\n        height: 400,\n        data: dvd,\n        scale: colsd,\n        forceFit: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, React.createElement(Legend, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }), React.createElement(Axis, {\n        name: \"day\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }), React.createElement(Axis, {\n        name: \"volume\",\n        label: {\n          formatter: function formatter(val) {\n            return \"\".concat(val, \"L\");\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        crosshairs: {\n          type: \"y\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }), React.createElement(Geom, {\n        type: \"line\",\n        position: \"day*volume\",\n        size: 2,\n        color: \"date\",\n        shape: \"smooth\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }), React.createElement(Geom, {\n        type: \"point\",\n        position: \"day*volume\",\n        size: 4,\n        shape: \"circle\",\n        color: \"date\",\n        style: {\n          stroke: \"#fff\",\n          lineWidth: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return Report;\n}(Component);\n\nexport default Report;","map":{"version":3,"sources":["/Users/berry/antd-demo/client/src/pages/common/Report.js"],"names":["React","Component","Chart","Geom","Axis","Tooltip","Legend","Card","DataSet","axios","Report","get","then","res","console","log","data","month","Monthly","ds","dv","createView","source","transform","type","fields","key","value","cols","range","weekdata","week","Weekly","dsw","dvw","colsw","daydata","day","Dayliy","dsd","dvd","colsd","fontSize","color","marginBottom","fontWeight","formatter","val","stroke","lineWidth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Chart, Geom, Axis, Tooltip, Legend } from \"bizcharts\";\nimport { Card } from \"antd\";\nimport DataSet from \"@antv/data-set\";\nimport axios from \"axios\";\nclass Report extends Component {\n  componentDidMount() {\n    axios\n      .get(\n        \"http://localhost:8080/iot/data/getDailyData?meterName=Sensor-1&date=2019-07-03\"\n      )\n      .then(res => {\n        console.log(res);\n      });\n  }\n\n  render() {\n    const data = [\n      {\n        month: \"Jan\",\n        Monthly: 3.9\n      },\n      {\n        month: \"Feb\",\n        Monthly: 4.2\n      },\n      {\n        month: \"Mar\",\n        Monthly: 5.7\n      },\n      {\n        month: \"Apr\",\n        Monthly: 8.5\n      },\n      {\n        month: \"May\",\n        Monthly: 11.9\n      },\n      {\n        month: \"Jun\",\n        Monthly: 15.2\n      },\n      {\n        month: \"Jul\",\n        Monthly: 17.0\n      },\n      {\n        month: \"Aug\",\n        Monthly: 16.6\n      },\n      {\n        month: \"Sep\",\n        Monthly: 14.2\n      },\n      {\n        month: \"Oct\",\n        Monthly: 10.3\n      },\n      {\n        month: \"Nov\",\n        Monthly: 6.6\n      },\n      {\n        month: \"Dec\",\n        Monthly: 4.8\n      }\n    ];\n    const ds = new DataSet();\n    const dv = ds.createView().source(data);\n    dv.transform({\n      type: \"fold\",\n      fields: [\"Monthly\"],\n      // 展开字段集\n      key: \"date\",\n      // key字段\n      value: \"volume\" // value字段\n    });\n    console.log(dv);\n    const cols = {\n      month: {\n        range: [0, 1]\n      }\n    };\n\n    const weekdata = [\n      {\n        week: \"Monday\",\n        Weekly: 3.2\n      },\n      {\n        week: \"Tuesdat\",\n        Weekly: 8\n      },\n      {\n        week: \"Wedesday\",\n        Weekly: 3.1\n      },\n      {\n        week: \"Thuesday\",\n        Weekly: 3.7\n      },\n      {\n        week: \"Friday\",\n        Weekly: 3.0\n      },\n      {\n        week: \"Satuday\",\n        Weekly: 2.7\n      },\n      {\n        week: \"Sunday\",\n        Weekly: 2.0\n      }\n    ];\n    const dsw = new DataSet();\n    const dvw = dsw.createView().source(weekdata);\n    dvw.transform({\n      type: \"fold\",\n      fields: [\"Weekly\"],\n      key: \"date\",\n      value: \"volume\"\n    });\n    console.log(dvw);\n    const colsw = {\n      week: {\n        range: [0, 1]\n      }\n    };\n\n    const daydata = [\n      {\n        day: \"00:00\",\n        Dayliy: \"10\"\n      },\n      {\n        day: \"01:00\",\n        Dayliy: \"4.2\"\n      },\n      {\n        day: \"02:00\",\n        Dayliy: \"6.2\"\n      },\n      {\n        day: \"03:00\",\n        Dayliy: \"4.9\"\n      },\n      {\n        day: \"04:00\",\n        Dayliy: \"12.1\"\n      },\n      {\n        day: \"05:00\",\n        Dayliy: \"3.2\"\n      },\n      {\n        day: \"06:00\",\n        Dayliy: \"2.7\"\n      },\n      {\n        day: \"07:00\",\n        Dayliy: \"4.6\"\n      },\n      {\n        day: \"08:00\",\n        Dayliy: \"6.3\"\n      },\n      {\n        day: \"09:00\",\n        Dayliy: \"5.3\"\n      },\n\n      {\n        day: \"10:00\",\n        Dayliy: \"8.0\"\n      },\n      {\n        day: \"11:00\",\n        Dayliy: \"6.9\"\n      },\n      {\n        day: \"12:00\",\n        Dayliy: \"6.2\"\n      },\n      {\n        day: \"13:00\",\n        Dayliy: \"10.1\"\n      },\n      {\n        day: \"14:00\",\n        Dayliy: \"7.2\"\n      },\n      {\n        day: \"15:00\",\n        Dayliy: \"6.2\"\n      },\n      {\n        day: \"16:00\",\n        Dayliy: \"22\"\n      },\n      {\n        day: \"17:00\",\n        Dayliy: \"9.2\"\n      },\n      {\n        day: \"18:00\",\n        Dayliy: \"8.2\"\n      },\n      {\n        day: \"19:00\",\n        Dayliy: \"8.2\"\n      },\n      {\n        day: \"20:00\",\n        Dayliy: \"5.2\"\n      },\n      {\n        day: \"21:00\",\n        Dayliy: \"2.2\"\n      },\n      {\n        day: \"22:00\",\n        Dayliy: \"6.2\"\n      },\n      {\n        day: \"23:00\",\n        Dayliy: \"4.2\"\n      }\n    ];\n    const dsd = new DataSet();\n    const dvd = dsd.createView().source(daydata);\n    dvd.transform({\n      type: \"fold\",\n      fields: [\"Dayliy\"],\n      // 展开字段集\n      key: \"date\",\n      // key字段\n      value: \"volume\" // value字段\n    });\n    console.log(dvd);\n    const colsd = {\n      day: {\n        range: [0, 1]\n      }\n    };\n\n    return (\n      <div>\n        <Card title=\"Water report\">\n          <p\n            style={{\n              fontSize: 14,\n              color: \"rgba(0, 0, 0, 0.85)\",\n              marginBottom: 16,\n              fontWeight: 500\n            }}\n          >\n            Water graph\n          </p>\n\n          <Card type=\"inner\" title=\"Monthly report\">\n            <Chart height={400} data={dv} scale={cols} forceFit>\n              <Legend />\n              <Axis name=\"month\" />\n              <Axis\n                name=\"volume\"\n                label={{\n                  formatter: val => `${val}L`\n                }}\n              />\n              <Tooltip\n                crosshairs={{\n                  type: \"y\"\n                }}\n              />\n              <Geom\n                type=\"line\"\n                position=\"month*volume\"\n                size={2}\n                color={\"date\"}\n                shape={\"smooth\"}\n              />\n              <Geom\n                type=\"point\"\n                position=\"month*volume\"\n                size={4}\n                shape={\"circle\"}\n                color={\"date\"}\n                style={{\n                  stroke: \"#fff\",\n                  lineWidth: 1\n                }}\n              />\n            </Chart>\n          </Card>\n\n          <Card type=\"inner\" title=\"Weekly report\">\n            <Chart height={400} data={dvw} scale={colsw} forceFit>\n              <Legend />\n              <Axis name=\"week\" />\n              <Axis\n                name=\"volume\"\n                label={{\n                  formatter: val => `${val}L`\n                }}\n              />\n\n              <Tooltip\n                crosshairs={{\n                  type: \"y\"\n                }}\n              />\n\n              <Geom\n                type=\"line\"\n                position=\"week*volume\"\n                size={2}\n                color={\"date\"}\n                shape={\"smooth\"}\n              />\n              <Geom\n                type=\"point\"\n                position=\"week*volume\"\n                size={4}\n                shape={\"circle\"}\n                color={\"date\"}\n                style={{\n                  stroke: \"#fff\",\n                  lineWidth: 1\n                }}\n              />\n            </Chart>\n          </Card>\n\n          <Card type=\"inner\" title=\"Daliy report\">\n            <Chart height={400} data={dvd} scale={colsd} forceFit>\n              <Legend />\n              <Axis name=\"day\" />\n              <Axis\n                name=\"volume\"\n                label={{\n                  formatter: val => `${val}L`\n                }}\n              />\n\n              <Tooltip\n                crosshairs={{\n                  type: \"y\"\n                }}\n              />\n\n              <Geom\n                type=\"line\"\n                position=\"day*volume\"\n                size={2}\n                color={\"date\"}\n                shape={\"smooth\"}\n              />\n              <Geom\n                type=\"point\"\n                position=\"day*volume\"\n                size={4}\n                shape={\"circle\"}\n                color={\"date\"}\n                style={{\n                  stroke: \"#fff\",\n                  lineWidth: 1\n                }}\n              />\n            </Chart>\n          </Card>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default Report;\n"]},"metadata":{},"sourceType":"module"}
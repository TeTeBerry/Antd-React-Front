{"ast":null,"code":"import _classCallCheck from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/berry/antd-demo/client/src/pages/common/SensorData.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport FusionCharts from \"fusioncharts\";\nimport Charts from \"fusioncharts/fusioncharts.charts\";\nimport Widgets from \"fusioncharts/fusioncharts.widgets\";\nimport ReactFC from \"react-fusioncharts\";\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./SensorData.css\";\nimport SensorName from \"./SensorCard\";\nReactFC.fcRoot(FusionCharts, Charts, Widgets, FusionTheme);\n\nvar SensorData =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SensorData, _React$Component);\n\n  function SensorData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SensorData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SensorData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.chartRef = null;\n    _this.state = {\n      showChart: false,\n      initValue: 0,\n      flowRate: \"\",\n      flowMilliLitres: \"\",\n      totalMilliLitres: \"\",\n      sensorName: \"\",\n      dataSource: {\n        chart: {\n          caption: \"Real Time Water Flow Rate\",\n          subCaption: \"\",\n          xAxisName: \"Local Time\",\n          yAxisName: \"Flow Rate\",\n          numberPrefix: \"L/min\",\n          refreshinterval: \"2\",\n          slantLabels: \"1\",\n          numdisplaysets: \"10\",\n          labeldisplay: \"rotate\",\n          showValues: \"0\",\n          showRealTimeValue: \"0\",\n          theme: \"fusion\"\n        },\n        categories: [{\n          category: [{\n            label: _this.clientDateTime().toString()\n          }]\n        }],\n        dataset: [{\n          data: [{\n            value: 0\n          }]\n        }]\n      }\n    };\n    _this.chartConfigs = {\n      type: \"realtimeline\",\n      renderAt: \"container\",\n      width: \"100%\",\n      height: \"400\",\n      dataFormat: \"json\"\n    };\n    return _this;\n  }\n\n  _createClass(SensorData, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getDataFor();\n    }\n  }, {\n    key: \"startUpdatingData\",\n    value: function startUpdatingData() {\n      var _this2 = this;\n\n      this.timerID = setInterval(function () {\n        axios.get(\"http://172.20.10.9:8088/react.php\").then(function (d) {\n          var x_axis = _this2.clientDateTime();\n\n          var y_axis = d.data.flowRate;\n          console.log(d.data);\n\n          _this2.chartRef.feedData(\"&label=\" + x_axis + \"&value=\" + y_axis);\n\n          _this2.setState({\n            sensorName: d.data.sensorName,\n            flowRate: d.data.flowRate,\n            flowMilliLitres: d.data.flowMilliLitres,\n            totalMilliLitres: d.data.totalMilliLitres\n          });\n        });\n      }, 1000);\n    }\n  }, {\n    key: \"getDataFor\",\n    value: function getDataFor() {\n      var _this3 = this;\n\n      axios.get(\"http://172.20.10.9:8088/react.php\", {\n        mode: \"cors\"\n      }).then(function (d) {\n        var dataSource = _this3.state.dataSource;\n        dataSource.chart.yAxisMaxValue = 100;\n        dataSource.chart.yAxisMinValue = 0;\n        dataSource.dataset[0][\"data\"][0].value = d.data.flowRate;\n\n        _this3.setState({\n          showChart: true,\n          dataSource: dataSource,\n          initValue: d.data.flowRate\n        }, function () {\n          _this3.startUpdatingData();\n        });\n      });\n    }\n  }, {\n    key: \"clientDateTime\",\n    value: function clientDateTime() {\n      var date_time = new Date();\n      console.log(date_time);\n      var curr_hour = date_time.getHours();\n      var zero_added_curr_hour = SensorData.addLeadingZero(curr_hour);\n      var curr_min = date_time.getMinutes();\n      var curr_sec = date_time.getSeconds();\n      var curr_time = zero_added_curr_hour + \":\" + curr_min + \":\" + curr_sec;\n      return curr_time;\n    }\n  }, {\n    key: \"getChartRef\",\n    value: function getChartRef(chart) {\n      this.chartRef = chart;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.timerID);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"row mt-5 mt-xs-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-12 mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-deck custom-card-deck\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(SensorName, {\n        header: \"Sensor Name\",\n        alt: \"fireSpot\",\n        label: \"(Meter Name)\",\n        value: this.state.sensorName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(SensorName, {\n        header: \"Flow Rate\",\n        alt: \"fireSpot\",\n        label: \"(L/min)\",\n        value: this.state.flowRate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }), React.createElement(SensorName, {\n        header: \"Current Liquid Flowing\",\n        alt: \"fireSpot\",\n        label: \"(mL/Sec)\",\n        value: this.state.flowMilliLitres,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }), React.createElement(SensorName, {\n        header: \"Output Liquid Quantity\",\n        alt: \"fireSpot\",\n        label: \"(mL)\",\n        value: this.state.totalMilliLitres,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"col-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card custom-card mb-5 mb-xs-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, this.state.showChart ? React.createElement(ReactFC, Object.assign({}, this.chartConfigs, {\n        dataSource: this.state.dataSource,\n        onRender: this.getChartRef.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      })) : null))));\n    }\n  }], [{\n    key: \"addLeadingZero\",\n    value: function addLeadingZero(num) {\n      return num <= 9 ? \"0\" + num : num;\n    }\n  }]);\n\n  return SensorData;\n}(React.Component);\n\nexport default SensorData;","map":{"version":3,"sources":["/Users/berry/antd-demo/client/src/pages/common/SensorData.js"],"names":["React","axios","FusionCharts","Charts","Widgets","ReactFC","FusionTheme","SensorName","fcRoot","SensorData","chartRef","state","showChart","initValue","flowRate","flowMilliLitres","totalMilliLitres","sensorName","dataSource","chart","caption","subCaption","xAxisName","yAxisName","numberPrefix","refreshinterval","slantLabels","numdisplaysets","labeldisplay","showValues","showRealTimeValue","theme","categories","category","label","clientDateTime","toString","dataset","data","value","chartConfigs","type","renderAt","width","height","dataFormat","getDataFor","timerID","setInterval","get","then","d","x_axis","y_axis","console","log","feedData","setState","mode","yAxisMaxValue","yAxisMinValue","startUpdatingData","date_time","Date","curr_hour","getHours","zero_added_curr_hour","addLeadingZero","curr_min","getMinutes","curr_sec","getSeconds","curr_time","clearInterval","getChartRef","bind","num","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport FusionCharts from \"fusioncharts\";\nimport Charts from \"fusioncharts/fusioncharts.charts\";\nimport Widgets from \"fusioncharts/fusioncharts.widgets\";\nimport ReactFC from \"react-fusioncharts\";\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./SensorData.css\";\nimport SensorName from \"./SensorCard\";\n\nReactFC.fcRoot(FusionCharts, Charts, Widgets, FusionTheme);\n\nclass SensorData extends React.Component {\n  chartRef = null;\n  state = {\n    showChart: false,\n    initValue: 0,\n    flowRate: \"\",\n    flowMilliLitres: \"\",\n    totalMilliLitres: \"\",\n    sensorName: \"\",\n    dataSource: {\n      chart: {\n        caption: \"Real Time Water Flow Rate\",\n        subCaption: \"\",\n        xAxisName: \"Local Time\",\n        yAxisName: \"Flow Rate\",\n        numberPrefix: \"L/min\",\n        refreshinterval: \"2\",\n        slantLabels: \"1\",\n        numdisplaysets: \"10\",\n        labeldisplay: \"rotate\",\n        showValues: \"0\",\n        showRealTimeValue: \"0\",\n        theme: \"fusion\"\n      },\n      categories: [\n        {\n          category: [\n            {\n              label: this.clientDateTime().toString()\n            }\n          ]\n        }\n      ],\n      dataset: [\n        {\n          data: [\n            {\n              value: 0\n            }\n          ]\n        }\n      ]\n    }\n  };\n  chartConfigs = {\n    type: \"realtimeline\",\n    renderAt: \"container\",\n    width: \"100%\",\n    height: \"400\",\n    dataFormat: \"json\"\n  };\n\n  componentDidMount() {\n    this.getDataFor();\n  }\n\n  startUpdatingData() {\n    this.timerID = setInterval(() => {\n      axios.get(\"http://172.20.10.9:8088/react.php\").then(d => {\n        let x_axis = this.clientDateTime();\n        let y_axis = d.data.flowRate;\n\n        console.log(d.data);\n        this.chartRef.feedData(\"&label=\" + x_axis + \"&value=\" + y_axis);\n        this.setState({\n          sensorName: d.data.sensorName,\n          flowRate: d.data.flowRate,\n          flowMilliLitres: d.data.flowMilliLitres,\n          totalMilliLitres: d.data.totalMilliLitres\n        });\n      });\n    }, 1000);\n  }\n\n  getDataFor() {\n    axios\n      .get(\"http://172.20.10.9:8088/react.php\", {\n        mode: \"cors\"\n      })\n      .then(d => {\n        const dataSource = this.state.dataSource;\n        dataSource.chart.yAxisMaxValue = 100;\n        dataSource.chart.yAxisMinValue = 0;\n        dataSource.dataset[0][\"data\"][0].value = d.data.flowRate;\n\n        this.setState(\n          {\n            showChart: true,\n            dataSource: dataSource,\n            initValue: d.data.flowRate\n          },\n          () => {\n            this.startUpdatingData();\n          }\n        );\n      });\n  }\n\n  static addLeadingZero(num) {\n    return num <= 9 ? \"0\" + num : num;\n  }\n\n  clientDateTime() {\n    var date_time = new Date();\n    console.log(date_time);\n    var curr_hour = date_time.getHours();\n    var zero_added_curr_hour = SensorData.addLeadingZero(curr_hour);\n    var curr_min = date_time.getMinutes();\n    var curr_sec = date_time.getSeconds();\n    var curr_time = zero_added_curr_hour + \":\" + curr_min + \":\" + curr_sec;\n    return curr_time;\n  }\n\n  getChartRef(chart) {\n    this.chartRef = chart;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    return (\n      <div className=\"row mt-5 mt-xs-4\">\n        <div className=\"col-12 mb-3\">\n          <div className=\"card-deck custom-card-deck\">\n            <SensorName\n              header=\"Sensor Name\"\n              alt=\"fireSpot\"\n              label=\"(Meter Name)\"\n              value={this.state.sensorName}\n            />\n            <SensorName\n              header=\"Flow Rate\"\n              alt=\"fireSpot\"\n              label=\"(L/min)\"\n              value={this.state.flowRate}\n            />\n            <SensorName\n              header=\"Current Liquid Flowing\"\n              alt=\"fireSpot\"\n              label=\"(mL/Sec)\"\n              value={this.state.flowMilliLitres}\n            />\n            <SensorName\n              header=\"Output Liquid Quantity\"\n              alt=\"fireSpot\"\n              label=\"(mL)\"\n              value={this.state.totalMilliLitres}\n            />\n          </div>\n        </div>\n        <div className=\"col-12\">\n          <div className=\"card custom-card mb-5 mb-xs-4\">\n            <div className=\"card-body\">\n              {this.state.showChart ? (\n                <ReactFC\n                  {...this.chartConfigs}\n                  dataSource={this.state.dataSource}\n                  onRender={this.getChartRef.bind(this)}\n                />\n              ) : null}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SensorData;\n"]},"metadata":{},"sourceType":"module"}
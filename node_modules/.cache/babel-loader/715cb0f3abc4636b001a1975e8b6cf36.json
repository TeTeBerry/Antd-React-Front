{"ast":null,"code":"import _objectSpread from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nvar AuthService = function AuthService() {\n  var _this = this;\n\n  _classCallCheck(this, AuthService);\n\n  this.login = function (userName, password) {\n    return _this.fetch(\"/admin/login\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        userName: userName,\n        password: password\n      })\n    }).then(function (res) {\n      _this.setToken(res.msg); //Setting the token in localStorage\n\n\n      _this.setUserName(res.data.userName);\n\n      console.log(_this.getToken());\n      console.log(_this.getUserName());\n      return Promise.resolve(res);\n    });\n  };\n\n  this.isLoggedIn = function () {\n    // Checks if there is a saved token and it's still valid\n    var token = _this.getToken(); // Getting token from localstorage\n\n\n    return !!token; // handwaiving here\n  };\n\n  this.setUserName = function (userName) {\n    localStorage.setItem(\"currentUser\", userName);\n  };\n\n  this.getUserName = function () {\n    return localStorage.getItem(\"currentUser\");\n  };\n\n  this.setToken = function (idToken) {\n    //Saves user token to localStorage\n    localStorage.setItem(\"id_token\", idToken);\n  };\n\n  this.getToken = function () {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem(\"id_token\"); // return localStorage.clear();\n  };\n\n  this.logout = function () {\n    // Clear user token and profile data from localStorage\n    return localStorage.removeItem(\"id_token\");\n  };\n\n  this.getConfirm = function () {\n    // Using jwt-decode npm package to decode the token\n    var answer = _this.getToken();\n\n    console.log(\"Recieved answer!\");\n    return answer;\n  };\n\n  this.fetch = function (url, options) {\n    //performs api calls sending the required authentication headers\n    var headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }; //Setting Authorization header\n    //Authorization Bear xxxxxxxx.xxxxxxx\n\n    if (_this.isLoggedIn()) {\n      headers[\"Authorization\"] = +_this.getToken();\n    }\n\n    return fetch(url, _objectSpread({\n      headers: headers\n    }, options)).then(_this._checkStatus).then(function (response) {\n      return response.json();\n    });\n  };\n\n  this._checkStatus = function (response) {\n    //raises an error in case response status is not a success\n    if (response.status >= 200 && response.status < 300) {\n      //Success status lies between 200 to 300\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  };\n};\n\nexport { AuthService as default };","map":{"version":3,"sources":["/Users/berry/antd-demo/client/src/pages/auth/AuthService.js"],"names":["AuthService","login","userName","password","fetch","method","body","JSON","stringify","then","res","setToken","msg","setUserName","data","console","log","getToken","getUserName","Promise","resolve","isLoggedIn","token","localStorage","setItem","getItem","idToken","logout","removeItem","getConfirm","answer","url","options","headers","Accept","_checkStatus","response","json","status","error","Error","statusText"],"mappings":";;;IAAqBA,W;;;;;OAOnBC,K,GAAQ,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC9B,WAAO,KAAI,CAACC,KAAL,iBAA2B;AAChCC,MAAAA,MAAM,EAAE,MADwB;AAEhCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBN,QAAAA,QAAQ,EAARA,QADmB;AAEnBC,QAAAA,QAAQ,EAARA;AAFmB,OAAf;AAF0B,KAA3B,EAMJM,IANI,CAMC,UAAAC,GAAG,EAAI;AACb,MAAA,KAAI,CAACC,QAAL,CAAcD,GAAG,CAACE,GAAlB,EADa,CACW;;;AACxB,MAAA,KAAI,CAACC,WAAL,CAAiBH,GAAG,CAACI,IAAJ,CAASZ,QAA1B;;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAI,CAACC,QAAL,EAAZ;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAI,CAACE,WAAL,EAAZ;AACA,aAAOC,OAAO,CAACC,OAAR,CAAgBV,GAAhB,CAAP;AACD,KAZM,CAAP;AAaD,G;;OAEDW,U,GAAa,YAAM;AACjB;AACA,QAAMC,KAAK,GAAG,KAAI,CAACL,QAAL,EAAd,CAFiB,CAEc;;;AAC/B,WAAO,CAAC,CAACK,KAAT,CAHiB,CAGD;AACjB,G;;OAEDT,W,GAAc,UAAAX,QAAQ,EAAI;AACxBqB,IAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCtB,QAApC;AACD,G;;OAEDgB,W,GAAc,YAAM;AAClB,WAAOK,YAAY,CAACE,OAAb,CAAqB,aAArB,CAAP;AACD,G;;OAEDd,Q,GAAW,UAAAe,OAAO,EAAI;AACpB;AACAH,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCE,OAAjC;AACD,G;;OAEDT,Q,GAAW,YAAM;AACf;AACA,WAAOM,YAAY,CAACE,OAAb,CAAqB,UAArB,CAAP,CAFe,CAGf;AACD,G;;OAEDE,M,GAAS,YAAM;AACb;AACA,WAAOJ,YAAY,CAACK,UAAb,CAAwB,UAAxB,CAAP;AACD,G;;OAEDC,U,GAAa,YAAM;AACjB;AACA,QAAIC,MAAM,GAAG,KAAI,CAACb,QAAL,EAAb;;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,WAAOc,MAAP;AACD,G;;OAED1B,K,GAAQ,UAAC2B,GAAD,EAAMC,OAAN,EAAkB;AACxB;AACA,QAAMC,OAAO,GAAG;AACdC,MAAAA,MAAM,EAAE,kBADM;AAEd,sBAAgB;AAFF,KAAhB,CAFwB,CAMxB;AACA;;AACA,QAAI,KAAI,CAACb,UAAL,EAAJ,EAAuB;AACrBY,MAAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,CAAC,KAAI,CAAChB,QAAL,EAA5B;AACD;;AAED,WAAOb,KAAK,CAAC2B,GAAD;AACVE,MAAAA,OAAO,EAAPA;AADU,OAEPD,OAFO,EAAL,CAIJvB,IAJI,CAIC,KAAI,CAAC0B,YAJN,EAKJ1B,IALI,CAKC,UAAA2B,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KALT,CAAP;AAMD,G;;OAEDF,Y,GAAe,UAAAC,QAAQ,EAAI;AACzB;AACA,QAAIA,QAAQ,CAACE,MAAT,IAAmB,GAAnB,IAA0BF,QAAQ,CAACE,MAAT,GAAkB,GAAhD,EAAqD;AACnD;AACA,aAAOF,QAAP;AACD,KAHD,MAGO;AACL,UAAIG,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,QAAQ,CAACK,UAAnB,CAAZ;AACAF,MAAAA,KAAK,CAACH,QAAN,GAAiBA,QAAjB;AACA,YAAMG,KAAN;AACD;AACF,G;;;SA1FkBvC,W","sourcesContent":["export default class AuthService {\n  //Initializing important variables\n\n  // constructor(domain) {\n  //   this.domain = domain || \"http://localhost:8080/iot\"; //API service domain\n  // }\n\n  login = (userName, password) => {\n    return this.fetch(`/admin/login`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        userName,\n        password\n      })\n    }).then(res => {\n      this.setToken(res.msg); //Setting the token in localStorage\n      this.setUserName(res.data.userName);\n      console.log(this.getToken());\n      console.log(this.getUserName());\n      return Promise.resolve(res);\n    });\n  };\n\n  isLoggedIn = () => {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken(); // Getting token from localstorage\n    return !!token; // handwaiving here\n  };\n\n  setUserName = userName => {\n    localStorage.setItem(\"currentUser\", userName);\n  };\n\n  getUserName = () => {\n    return localStorage.getItem(\"currentUser\");\n  };\n\n  setToken = idToken => {\n    //Saves user token to localStorage\n    localStorage.setItem(\"id_token\", idToken);\n  };\n\n  getToken = () => {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem(\"id_token\");\n    // return localStorage.clear();\n  };\n\n  logout = () => {\n    // Clear user token and profile data from localStorage\n    return localStorage.removeItem(\"id_token\");\n  };\n\n  getConfirm = () => {\n    // Using jwt-decode npm package to decode the token\n    let answer = this.getToken();\n    console.log(\"Recieved answer!\");\n    return answer;\n  };\n\n  fetch = (url, options) => {\n    //performs api calls sending the required authentication headers\n    const headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    };\n    //Setting Authorization header\n    //Authorization Bear xxxxxxxx.xxxxxxx\n    if (this.isLoggedIn()) {\n      headers[\"Authorization\"] = +this.getToken();\n    }\n\n    return fetch(url, {\n      headers,\n      ...options\n    })\n      .then(this._checkStatus)\n      .then(response => response.json());\n  };\n\n  _checkStatus = response => {\n    //raises an error in case response status is not a success\n    if (response.status >= 200 && response.status < 300) {\n      //Success status lies between 200 to 300\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
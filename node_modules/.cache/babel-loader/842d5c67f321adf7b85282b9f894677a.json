{"ast":null,"code":"import _classCallCheck from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/berry/antd-demo/client/src/pages/common/Report.js\";\nimport React, { Component } from \"react\";\nimport { Card } from \"antd\";\nimport axios from \"axios\";\nimport { Chart, Geom, Axis, Tooltip } from \"bizcharts\";\nvar currentDate = new Date();\nvar date = currentDate.getDate();\nvar month = currentDate.getMonth();\nvar year = currentDate.getFullYear();\nvar dateString = year + \"-\" + (month + 1) + \"-\" + date;\n\nvar Report =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Report, _Component);\n\n  function Report() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Report);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Report)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      dayData: [],\n      weekData: [],\n      monthData: []\n    };\n    return _this;\n  }\n\n  _createClass(Report, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getDailyReport();\n      this.getWeeklyReport();\n      this.getMonthlyReport();\n    }\n  }, {\n    key: \"getDailyReport\",\n    value: function getDailyReport() {\n      var _this2 = this;\n\n      axios.get(\"http://localhost:8080/iot/data/getDailyData?meterName=\".concat(this.props.meterName, \"&date=\").concat(dateString)).then(function (res) {\n        _this2.setState({\n          dayData: res.data.data\n        });\n\n        console.log(dateString);\n      });\n    }\n  }, {\n    key: \"getWeeklyReport\",\n    value: function getWeeklyReport() {\n      var _this3 = this;\n\n      axios.get(\"http://localhost:8080/iot/data/getWeeklyData?meterName=Sensor-1&date=\".concat(dateString)).then(function (res) {\n        _this3.setState({\n          weekData: res.data.data\n        });\n      });\n    }\n  }, {\n    key: \"getMonthlyReport\",\n    value: function getMonthlyReport() {\n      var _this4 = this;\n\n      axios.get(\"http://localhost:8080/iot/data/getMonthlyData?meterName=Sensor-1&date=\".concat(dateString)).then(function (res) {\n        _this4.setState({\n          monthData: res.data.data\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var dayData = this.state.dayData;\n      var daycols = {\n        totalMilliters: {\n          tickInterval: 1500\n        }\n      };\n      var weekData = this.state.weekData;\n      var weekcols = {\n        totalMilliters: {\n          tickInterval: 2000\n        }\n      };\n      var monthData = this.state.monthData;\n      var monthcols = {\n        totalMilliters: {\n          tickInterval: 3000\n        }\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(Card, {\n        title: \"Water report\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: {\n          fontSize: 14,\n          color: \"rgba(0, 0, 0, 0.85)\",\n          marginBottom: 16,\n          fontWeight: 500\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Water report\"), React.createElement(Card, {\n        type: \"inner\",\n        title: \"Daliy report\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Chart, {\n        height: 400,\n        data: dayData,\n        scale: daycols,\n        forceFit: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Axis, {\n        name: \"hour\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(Axis, {\n        name: \"totalMilliters\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        crosshairs: {\n          type: \"y\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), React.createElement(Geom, {\n        type: \"interval\",\n        position: \"hour*totalMilliters\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }))), React.createElement(Card, {\n        type: \"inner\",\n        title: \"Weekly report\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(Chart, {\n        height: 500,\n        data: weekData,\n        scale: weekcols,\n        forceFit: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(Axis, {\n        name: \"week\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(Axis, {\n        name: \"totalMilliters\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        crosshairs: {\n          type: \"y\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }), React.createElement(Geom, {\n        type: \"interval\",\n        position: \"week*totalMilliters\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      })), React.createElement(Card, {\n        type: \"inner\",\n        title: \"Monthly report\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Chart, {\n        height: 500,\n        data: monthData,\n        scale: monthcols,\n        forceFit: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Axis, {\n        name: \"day\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), React.createElement(Axis, {\n        name: \"totalMilliters\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        crosshairs: {\n          type: \"y\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }), React.createElement(Geom, {\n        type: \"interval\",\n        position: \"day*totalMilliters\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return Report;\n}(Component);\n\nexport default Report;","map":{"version":3,"sources":["/Users/berry/antd-demo/client/src/pages/common/Report.js"],"names":["React","Component","Card","axios","Chart","Geom","Axis","Tooltip","currentDate","Date","date","getDate","month","getMonth","year","getFullYear","dateString","Report","state","dayData","weekData","monthData","getDailyReport","getWeeklyReport","getMonthlyReport","get","props","meterName","then","res","setState","data","console","log","daycols","totalMilliters","tickInterval","weekcols","monthcols","fontSize","color","marginBottom","fontWeight","type"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Card } from \"antd\";\nimport axios from \"axios\";\nimport { Chart, Geom, Axis, Tooltip } from \"bizcharts\";\n\nvar currentDate = new Date();\nvar date = currentDate.getDate();\nvar month = currentDate.getMonth();\nvar year = currentDate.getFullYear();\nvar dateString = year + \"-\" + (month + 1) + \"-\" + date;\n\nclass Report extends Component {\n  state = {\n    dayData: [],\n    weekData: [],\n    monthData: []\n  };\n\n  componentDidMount() {\n    this.getDailyReport();\n    this.getWeeklyReport();\n    this.getMonthlyReport();\n  }\n\n  getDailyReport() {\n    axios\n      .get(\n        `http://localhost:8080/iot/data/getDailyData?meterName=${\n          this.props.meterName\n        }&date=${dateString}`\n      )\n      .then(res => {\n        this.setState({\n          dayData: res.data.data\n        });\n        console.log(dateString);\n      });\n  }\n\n  getWeeklyReport() {\n    axios\n      .get(\n        `http://localhost:8080/iot/data/getWeeklyData?meterName=Sensor-1&date=${dateString}`\n      )\n      .then(res => {\n        this.setState({\n          weekData: res.data.data\n        });\n      });\n  }\n\n  getMonthlyReport() {\n    axios\n      .get(\n        `http://localhost:8080/iot/data/getMonthlyData?meterName=Sensor-1&date=${dateString}`\n      )\n      .then(res => {\n        this.setState({\n          monthData: res.data.data\n        });\n      });\n  }\n\n  render() {\n    const { dayData } = this.state;\n    const daycols = {\n      totalMilliters: {\n        tickInterval: 1500\n      }\n    };\n    const { weekData } = this.state;\n    const weekcols = {\n      totalMilliters: {\n        tickInterval: 2000\n      }\n    };\n    const { monthData } = this.state;\n    const monthcols = {\n      totalMilliters: {\n        tickInterval: 3000\n      }\n    };\n\n    return (\n      <div>\n        <Card title=\"Water report\">\n          <p\n            style={{\n              fontSize: 14,\n              color: \"rgba(0, 0, 0, 0.85)\",\n              marginBottom: 16,\n              fontWeight: 500\n            }}\n          >\n            Water report\n          </p>\n\n          <Card type=\"inner\" title=\"Daliy report\">\n            <Chart height={400} data={dayData} scale={daycols} forceFit>\n              <Axis name=\"hour\" />\n              <Axis name=\"totalMilliters\" />\n              <Tooltip\n                crosshairs={{\n                  type: \"y\"\n                }}\n              />\n              <Geom type=\"interval\" position=\"hour*totalMilliters\" />\n            </Chart>\n          </Card>\n\n          <Card type=\"inner\" title=\"Weekly report\" />\n          <Chart height={500} data={weekData} scale={weekcols} forceFit>\n            <Axis name=\"week\" />\n            <Axis name=\"totalMilliters\" />\n            <Tooltip\n              crosshairs={{\n                type: \"y\"\n              }}\n            />\n            <Geom type=\"interval\" position=\"week*totalMilliters\" />\n          </Chart>\n\n          <Card type=\"inner\" title=\"Monthly report\">\n            <Chart height={500} data={monthData} scale={monthcols} forceFit>\n              <Axis name=\"day\" />\n              <Axis name=\"totalMilliters\" />\n              <Tooltip\n                crosshairs={{\n                  type: \"y\"\n                }}\n              />\n              <Geom type=\"interval\" position=\"day*totalMilliters\" />\n            </Chart>\n          </Card>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default Report;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/berry/antd-demo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/berry/antd-demo/client/src/pages/memberpage/SetupVolume.js\";\nimport React from \"react\";\nimport { Button, Modal, Form, Input, message, Card, Tag } from \"antd\";\nimport axios from \"axios\";\nimport q from \"querystring\";\nvar VolumeCreateForm = Form.create({\n  name: \"form_in_modal\"\n})(\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(_class, _React$Component);\n\n  function _class() {\n    _classCallCheck(this, _class);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(_class).apply(this, arguments));\n  }\n\n  _createClass(_class, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          visible = _this$props.visible,\n          onCancel = _this$props.onCancel,\n          onCreate = _this$props.onCreate,\n          form = _this$props.form;\n      var getFieldDecorator = form.getFieldDecorator;\n      return React.createElement(Modal, {\n        visible: visible,\n        title: \"Set up water volume\",\n        okText: \"Setup\",\n        onCancel: onCancel,\n        onOk: onCreate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, React.createElement(Form, {\n        layout: \"vertical\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(Form.Item, {\n        label: \"Member Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, getFieldDecorator(\"memberName\", {\n        rules: [{\n          required: true,\n          message: \"Please input meter name!\"\n        }]\n      })(React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }))), React.createElement(Form.Item, {\n        label: \"Volume\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, getFieldDecorator(\"volume\", {\n        rules: [{\n          required: true,\n          message: \"Please input water volume!\"\n        }]\n      })(React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      })))), React.createElement(Tag, {\n        color: \"magenta\",\n        style: {\n          marginBottom: 15\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Do you know ?\"), React.createElement(Card, {\n        style: {\n          width: 472\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"1.\"), \"Toilet flush: 126 litres (two flushes per day; the rest of the time use grey water)\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"2.Washing hands: 25.2 litres (12 times per day, on average)\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"3.Brushing teeth: 5.6 litres (twice per day)\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"4.Bath: 50 litres (1 half-full bath per week, which includes water for rinsing hair. Washing your hair once a week may be less than you or your hair type can tolerate but it\\u2019s perfectly hygienic.)\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"5.Sponge bath: 1.8 litres (six times per week. Sponge baths are also hygienic if done properly: it\\u2019s how patients are washed in hospital. Make sure you keep your washcloths/sponges scrupulously clean, and use a fresh one every time you wash.)\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"6.Handwashing dishes: 63 litres (3.5 sink-loads per week)\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"7.Dishwasher: 29 litres (one load per week)\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"8.Washing machine: 112.5 litres (1.5 loads per week)\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"9.Cooking: 7 litres (average one litre per day)\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"10.Water for tea/coffee: 4.2 litres (average three cups per day)\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"11.Refilling pet water bowl: 6.3 litres (three cat bowls per day)\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"12.Dripping tap: 35 litres\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"12.Dripping tap: 35 litres\"))));\n    }\n  }]);\n\n  return _class;\n}(React.Component));\n\nvar SetupVolume =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(SetupVolume, _React$Component2);\n\n  function SetupVolume() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SetupVolume);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SetupVolume)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      visible: false\n    };\n\n    _this.error = function () {\n      message.error(\"Set up volume fail!\");\n    };\n\n    _this.showModal = function () {\n      _this.setState({\n        visible: true\n      });\n    };\n\n    _this.handleCancel = function () {\n      _this.setState({\n        visible: false\n      });\n    };\n\n    _this.createSuccess = function () {\n      message.success(\"Set up volume success!\");\n    };\n\n    _this.handleCreate = function () {\n      var form = _this.formRef.props.form;\n      var formFields = form.getFieldsValue();\n      var formData = q.stringify({\n        memberName: formFields.memberName,\n        volume: formFields.volume\n      });\n      console.log(formData);\n      form.validateFields(function (err, values) {\n        if (err) {\n          return;\n        }\n\n        console.log(\"Received values of form: \", values);\n        form.resetFields();\n\n        _this.setState({\n          visible: false\n        });\n      });\n      axios.post(\"http://localhost:8080/iot/meter/setMemberVolume\", formData).then(function (res) {\n        console.log(res.data);\n\n        if (res.data.code !== 200) {\n          return alert(res.data.msg);\n        }\n\n        _this.createSuccess();\n      });\n    };\n\n    _this.saveFormRef = function (formRef) {\n      _this.formRef = formRef;\n    };\n\n    return _this;\n  }\n\n  _createClass(SetupVolume, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"primary\",\n        onClick: this.showModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Setup Volume\"), React.createElement(VolumeCreateForm, {\n        wrappedComponentRef: this.saveFormRef,\n        visible: this.state.visible,\n        onCancel: this.handleCancel,\n        onCreate: this.handleCreate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return SetupVolume;\n}(React.Component);\n\nexport default SetupVolume;","map":{"version":3,"sources":["/Users/berry/antd-demo/client/src/pages/memberpage/SetupVolume.js"],"names":["React","Button","Modal","Form","Input","message","Card","Tag","axios","q","VolumeCreateForm","create","name","props","visible","onCancel","onCreate","form","getFieldDecorator","rules","required","marginBottom","width","Component","SetupVolume","state","error","showModal","setState","handleCancel","createSuccess","success","handleCreate","formRef","formFields","getFieldsValue","formData","stringify","memberName","volume","console","log","validateFields","err","values","resetFields","post","then","res","data","code","alert","msg","saveFormRef"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Button, Modal, Form, Input, message, Card, Tag } from \"antd\";\nimport axios from \"axios\";\nimport q from \"querystring\";\n\nconst VolumeCreateForm = Form.create({ name: \"form_in_modal\" })(\n  class extends React.Component {\n    render() {\n      const { visible, onCancel, onCreate, form } = this.props;\n      const { getFieldDecorator } = form;\n      return (\n        <Modal\n          visible={visible}\n          title=\"Set up water volume\"\n          okText=\"Setup\"\n          onCancel={onCancel}\n          onOk={onCreate}\n        >\n          <Form layout=\"vertical\">\n            <Form.Item label=\"Member Name\">\n              {getFieldDecorator(\"memberName\", {\n                rules: [\n                  {\n                    required: true,\n                    message: \"Please input meter name!\"\n                  }\n                ]\n              })(<Input />)}\n            </Form.Item>\n\n            <Form.Item label=\"Volume\">\n              {getFieldDecorator(\"volume\", {\n                rules: [\n                  {\n                    required: true,\n                    message: \"Please input water volume!\"\n                  }\n                ]\n              })(<Input />)}\n            </Form.Item>\n          </Form>\n\n          <Tag color=\"magenta\" style={{ marginBottom: 15 }}>\n            Do you know ?\n          </Tag>\n          <Card style={{ width: 472 }}>\n            <p>\n              <b>1.</b>Toilet flush: 126 litres (two flushes per day; the rest\n              of the time use grey water)\n            </p>\n            <p>2.Washing hands: 25.2 litres (12 times per day, on average)</p>\n            <p>3.Brushing teeth: 5.6 litres (twice per day)</p>\n            <p>\n              4.Bath: 50 litres (1 half-full bath per week, which includes water\n              for rinsing hair. Washing your hair once a week may be less than\n              you or your hair type can tolerate but it’s perfectly hygienic.)\n            </p>\n            <p>\n              5.Sponge bath: 1.8 litres (six times per week. Sponge baths are\n              also hygienic if done properly: it’s how patients are washed in\n              hospital. Make sure you keep your washcloths/sponges scrupulously\n              clean, and use a fresh one every time you wash.)\n            </p>\n            <p>6.Handwashing dishes: 63 litres (3.5 sink-loads per week)</p>\n            <p>7.Dishwasher: 29 litres (one load per week)</p>\n            <p>8.Washing machine: 112.5 litres (1.5 loads per week)</p>\n            <p>9.Cooking: 7 litres (average one litre per day)</p>\n            <p>\n              10.Water for tea/coffee: 4.2 litres (average three cups per day)\n            </p>\n            <p>\n              11.Refilling pet water bowl: 6.3 litres (three cat bowls per day)\n            </p>\n            <p>12.Dripping tap: 35 litres</p>\n            <p>\n              <b>12.Dripping tap: 35 litres</b>\n            </p>\n          </Card>\n        </Modal>\n      );\n    }\n  }\n);\n\nclass SetupVolume extends React.Component {\n  state = {\n    visible: false\n  };\n  error = () => {\n    message.error(\"Set up volume fail!\");\n  };\n\n  showModal = () => {\n    this.setState({ visible: true });\n  };\n\n  handleCancel = () => {\n    this.setState({ visible: false });\n  };\n  createSuccess = () => {\n    message.success(\"Set up volume success!\");\n  };\n\n  handleCreate = () => {\n    const { form } = this.formRef.props;\n    const formFields = form.getFieldsValue();\n    const formData = q.stringify({\n      memberName: formFields.memberName,\n      volume: formFields.volume\n    });\n    console.log(formData);\n    form.validateFields((err, values) => {\n      if (err) {\n        return;\n      }\n      console.log(\"Received values of form: \", values);\n      form.resetFields();\n      this.setState({ visible: false });\n    });\n\n    axios\n      .post(\"http://localhost:8080/iot/meter/setMemberVolume\", formData)\n      .then(res => {\n        console.log(res.data);\n        if (res.data.code !== 200) {\n          return alert(res.data.msg);\n        }\n        this.createSuccess();\n      });\n  };\n\n  saveFormRef = formRef => {\n    this.formRef = formRef;\n  };\n\n  render() {\n    return (\n      <div>\n        <Button type=\"primary\" onClick={this.showModal}>\n          Setup Volume\n        </Button>\n        <VolumeCreateForm\n          wrappedComponentRef={this.saveFormRef}\n          visible={this.state.visible}\n          onCancel={this.handleCancel}\n          onCreate={this.handleCreate}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SetupVolume;\n"]},"metadata":{},"sourceType":"module"}
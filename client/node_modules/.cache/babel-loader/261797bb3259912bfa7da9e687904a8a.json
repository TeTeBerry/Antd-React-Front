{"ast":null,"code":"import _objectSpread from \"/Users/berry/antd-demo/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/berry/antd-demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport decode from 'jwt-decode';\n\nvar AuthService = //Initializing important variables\nfunction AuthService(domain) {\n  var _this = this;\n\n  _classCallCheck(this, AuthService);\n\n  this.login = function (username, password) {\n    return _this.fetch(\"\".concat(_this.domain, \"/users/authenticate\"), {\n      method: \"POST\",\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    }).then(function (res) {\n      _this.setToken(res.token); //Setting the token in localStorage\n\n\n      return Promise.resolve(res);\n    });\n  };\n\n  this.loggedIn = function () {\n    //Checks if there is a saved token\n    var token = _this.getToken(); //Getting token from localStorage\n\n\n    return !!token && _this.isTokenExpired(token);\n  };\n\n  this.isTokenExpired = function (token) {\n    try {\n      var decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        //Checking if token is expired.\n        return true;\n      } else return false;\n    } catch (err) {\n      console.log(\"expired check failed!\");\n      return false;\n    }\n  };\n\n  this.setToken = function (idToken) {\n    //Saves user token to localStorage\n    localStorage.setItem(\"id_token\", idToken);\n  };\n\n  this.getToken = function () {\n    //Retrieves the user token from localStorage\n    return localStorage.getItem(\"id_token\");\n  };\n\n  this.logout = function () {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n  };\n\n  this.getConfirm = function () {\n    var answer = decode(_this.getToken());\n    console.log(\"Recieved answer!\");\n    return answer;\n  };\n\n  this.fetch = function (url, options) {\n    //performs api calls sending the required authentication headers\n    var headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }; //Setting Authorization header\n    //Authorization Bear xxxxxxxx.xxxxxxx\n\n    if (_this.loggedIn()) {\n      headers[\"Authorization\"] = \"Bearer\" + _this.getToken();\n    }\n\n    return fetch(url, _objectSpread({\n      headers: headers\n    }, options)).then(_this._checkStatus).then(function (response) {\n      return response.json();\n    });\n  };\n\n  this._checkStatus = function (response) {\n    //raises an error in case response status is not a success\n    if (response.status >= 200 && response.status < 300) {\n      //Success status lies between 200 to 300\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  };\n\n  this.domain = domain || \"http://localhost:4000\"; //API service domain\n};\n\nexport { AuthService as default };","map":{"version":3,"sources":["/Users/berry/antd-demo/src/pages/AuthService.js"],"names":["decode","AuthService","domain","login","username","password","fetch","method","body","JSON","stringify","then","res","setToken","token","Promise","resolve","loggedIn","getToken","isTokenExpired","decoded","exp","Date","now","err","console","log","idToken","localStorage","setItem","getItem","logout","removeItem","getConfirm","answer","url","options","headers","Accept","_checkStatus","response","json","status","error","Error","statusText"],"mappings":"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","sourcesContent":["import decode from 'jwt-decode';\nexport default class AuthService {\n    //Initializing important variables\n    constructor(domain) {\n        this.domain = domain || \"http://localhost:4000\"//API service domain\n    }\n    login = (username, password) => {\n        return this.fetch(`${this.domain}/users/authenticate`,{\n            method: \"POST\",\n            body: JSON.stringify({\n                username,\n                password\n            })\n        }).then(res => {\n            this.setToken(res.token);//Setting the token in localStorage\n            return Promise.resolve(res);\n        });\n    };\n\n    loggedIn = () => {\n        //Checks if there is a saved token\n        const token = this.getToken();//Getting token from localStorage\n        return !!token && this.isTokenExpired(token);\n    };\n    \n    isTokenExpired = token => {\n        try {\n            const decoded = decode(token);\n            if (decoded.exp < Date.now() / 1000){\n                //Checking if token is expired.\n                return true;\n            }else return false;\n        }catch(err) {\n            console.log(\"expired check failed!\");\n            return false;\n        }\n    };\n\n    setToken = idToken => {\n        //Saves user token to localStorage\n        localStorage.setItem(\"id_token\",idToken);\n    };\n\n    getToken = () => {\n        //Retrieves the user token from localStorage\n        return localStorage.getItem(\"id_token\");\n    };\n    logout = () => {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem('id_token');\n    }\n\n\n    getConfirm = () => {\n        let answer = decode(this.getToken());\n        console.log(\"Recieved answer!\");\n        return answer;\n    };\n    fetch = (url, options) => {\n        //performs api calls sending the required authentication headers\n        const headers = {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n        };\n        //Setting Authorization header\n        //Authorization Bear xxxxxxxx.xxxxxxx\n        if (this.loggedIn()) {\n            headers[\"Authorization\"] = \"Bearer\" + this.getToken();\n        }\n        \n        return fetch(url, {\n            headers,\n            ...options\n        })\n        .then(this._checkStatus)\n        .then(response => response.json());\n    };\n\n    _checkStatus = response => {\n        //raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300) {\n            //Success status lies between 200 to 300\n            return response;\n        } else {\n            var error = new Error(response.statusText);\n            error.response = response;\n            throw error;\n        }\n    };\n\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/Users/berry/antd-demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/berry/antd-demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/berry/antd-demo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/berry/antd-demo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/berry/antd-demo/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/berry/antd-demo/src/pages/withAuth.js\";\nimport React, { Component } from 'react';\nimport AuthService from './AuthService';\n/* A higher order component is frequently written as a function that returns a class. */\n\nexport default function withAuth(AuthComponent) {\n  var _temp;\n\n  var Auth = new AuthService();\n  return _temp =\n  /*#__PURE__*/\n  function (_Component) {\n    _inherits(AuthWrapped, _Component);\n\n    function AuthWrapped() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      _classCallCheck(this, AuthWrapped);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AuthWrapped)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      _this.state = {\n        confirm: null,\n        loaded: false\n        /* In the componentDid<ount, we would want to do a couple of important tasks in order to verify the current users authentication status\n        prior to granting them enterance into the app. */\n\n      };\n      return _this;\n    }\n\n    _createClass(AuthWrapped, [{\n      key: \"componentWillMount\",\n      value: function componentWillMount() {\n        if (!Auth.loggedIn()) {\n          this.props.history.replace('/login');\n        } else {\n          /* Try to get confirmation message from the Auth helper. */\n          try {\n            var confirm = Auth.getConfirm();\n            console.log(\"confirmation is:\", confirm);\n            this.setState({\n              confirm: confirm,\n              loaded: true\n            });\n          }\n          /* Oh snap! Looks like there's an error so we'll print it out and log the user out for security reasons. */\n          catch (err) {\n            console.log(err);\n            Auth.logout();\n            this.props.history.replace('/login');\n          }\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        if (this.state.loaded === true) {\n          if (this.state.confirm) {\n            console.log(\"confirmed!\");\n            return (\n              /* component that is currently being wrapper(App.js) */\n              React.createElement(AuthComponent, {\n                history: this.props.history,\n                confirm: this.state.confirm,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 48\n                },\n                __self: this\n              })\n            );\n          } else {\n            console.log(\"not confirmed!\");\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }]);\n\n    return AuthWrapped;\n  }(Component), _temp;\n}","map":{"version":3,"sources":["/Users/berry/antd-demo/src/pages/withAuth.js"],"names":["React","Component","AuthService","withAuth","AuthComponent","Auth","state","confirm","loaded","loggedIn","props","history","replace","getConfirm","console","log","setState","err","logout"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA;;AACA,eAAe,SAASC,QAAT,CAAkBC,aAAlB,EAAiC;AAAA;;AAE5C,MAAMC,IAAI,GAAG,IAAIH,WAAJ,EAAb;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,YAEII,KAFJ,GAEY;AACJC,QAAAA,OAAO,EAAE,IADL;AAEJC,QAAAA,MAAM,EAAE;AAGZ;;;AALQ,OAFZ;AAAA;AAAA;;AAAA;AAAA;AAAA,2CASyB;AACjB,YAAI,CAACH,IAAI,CAACI,QAAL,EAAL,EAAsB;AAClB,eAAKC,KAAL,CAAWC,OAAX,CAAmBC,OAAnB,CAA2B,QAA3B;AACH,SAFD,MAGK;AACD;AACA,cAAI;AAEA,gBAAML,OAAO,GAAGF,IAAI,CAACQ,UAAL,EAAhB;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCR,OAAhC;AACA,iBAAKS,QAAL,CAAc;AACVT,cAAAA,OAAO,EAAEA,OADC;AAEVC,cAAAA,MAAM,EAAE;AAFE,aAAd;AAIH;AACD;AACA,iBAAOS,GAAP,EAAY;AACRH,YAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACAZ,YAAAA,IAAI,CAACa,MAAL;AACA,iBAAKR,KAAL,CAAWC,OAAX,CAAmBC,OAAnB,CAA2B,QAA3B;AACH;AACJ;AACJ;AA/BL;AAAA;AAAA,+BAiCa;AACL,YAAI,KAAKN,KAAL,CAAWE,MAAX,KAAsB,IAA1B,EAAgC;AAC5B,cAAI,KAAKF,KAAL,CAAWC,OAAf,EAAwB;AACpBO,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA;AACI;AACA,kCAAC,aAAD;AAAe,gBAAA,OAAO,EAAE,KAAKL,KAAL,CAAWC,OAAnC;AAA4C,gBAAA,OAAO,EAAE,KAAKL,KAAL,CAAWC,OAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAIH,WAND,MAOK;AACDO,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,mBAAO,IAAP;AACH;AACJ,SAZD,MAaK;AACD,iBAAO,IAAP;AACH;AAEJ;AAnDL;;AAAA;AAAA,IAAiCd,SAAjC;AAqDH","sourcesContent":["import React, { Component } from 'react';\nimport AuthService from './AuthService';\n\n/* A higher order component is frequently written as a function that returns a class. */\nexport default function withAuth(AuthComponent) {\n    \n    const Auth = new AuthService();\n\n    return class AuthWrapped extends Component {\n       \n        state = {\n            confirm: null,\n            loaded: false\n        }\n\n        /* In the componentDid<ount, we would want to do a couple of important tasks in order to verify the current users authentication status\n        prior to granting them enterance into the app. */\n        componentWillMount() {\n            if (!Auth.loggedIn()) {\n                this.props.history.replace('/login')\n            }\n            else {\n                /* Try to get confirmation message from the Auth helper. */\n                try {\n                    \n                    const confirm = Auth.getConfirm()\n                    console.log(\"confirmation is:\", confirm);\n                    this.setState({\n                        confirm: confirm,\n                        loaded: true\n                    })\n                }\n                /* Oh snap! Looks like there's an error so we'll print it out and log the user out for security reasons. */\n                catch (err) {\n                    console.log(err);\n                    Auth.logout()\n                    this.props.history.replace('/login');\n                }\n            }\n        }\n\n        render() {\n            if (this.state.loaded === true) {\n                if (this.state.confirm) {\n                    console.log(\"confirmed!\")\n                    return (\n                        /* component that is currently being wrapper(App.js) */\n                        <AuthComponent history={this.props.history} confirm={this.state.confirm} />\n                    )\n                }\n                else {\n                    console.log(\"not confirmed!\")\n                    return null\n                }\n            }\n            else {\n                return null\n            }\n\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}